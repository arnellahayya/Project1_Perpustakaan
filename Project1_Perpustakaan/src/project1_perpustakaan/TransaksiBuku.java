/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project1_perpustakaan;

import project1_perpustakaan.DatabaseKoneksi.DatabaseConnection;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arnella
 */
public class TransaksiBuku extends javax.swing.JFrame {

    /**
     * Creates new form TransaksiBuku
     */
    public TransaksiBuku() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layoutTransaksi = new javax.swing.JPanel();
        anggota = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        NIM = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        nama = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jurusan = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nomorHp = new javax.swing.JTextField();
        buku = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        kodeBuku = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        judulBuku = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        namaPengarang = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        penerbit = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        tahunTerbit = new javax.swing.JTextField();
        cariText = new javax.swing.JTextField();
        tambah = new javax.swing.JButton();
        cari = new javax.swing.JButton();
        simpan = new javax.swing.JButton();
        batal = new javax.swing.JButton();
        perbarui = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        keluar = new javax.swing.JButton();
        tampil = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        dendaText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelTransaksi = new javax.swing.JTable();
        cariTextBuku = new javax.swing.JTextField();
        cariBuku = new javax.swing.JButton();
        tanggalPinjam = new javax.swing.JFormattedTextField();
        tanggalKembali = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        header = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        layoutTransaksi.setBackground(new java.awt.Color(153, 204, 255));
        layoutTransaksi.setPreferredSize(new java.awt.Dimension(800, 450));

        anggota.setBackground(new java.awt.Color(153, 204, 255));
        anggota.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("NIM");

        NIM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NIMActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Nama");

        nama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 102));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Jurusan");

        jurusan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jurusanActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 102));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("No. HP");

        nomorHp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomorHpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout anggotaLayout = new javax.swing.GroupLayout(anggota);
        anggota.setLayout(anggotaLayout);
        anggotaLayout.setHorizontalGroup(
            anggotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(anggotaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(anggotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addGap(62, 62, 62)
                .addGroup(anggotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NIM)
                    .addComponent(nama)
                    .addComponent(jurusan)
                    .addComponent(nomorHp))
                .addContainerGap())
        );
        anggotaLayout.setVerticalGroup(
            anggotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(anggotaLayout.createSequentialGroup()
                .addGroup(anggotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NIM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(anggotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(anggotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jurusan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(anggotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomorHp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        buku.setBackground(new java.awt.Color(153, 204, 255));
        buku.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 102));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Kode Buku");

        kodeBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kodeBukuActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 102));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Judul Buku");

        judulBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                judulBukuActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 102));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Nama Pengarang");

        namaPengarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaPengarangActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 51, 102));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Penerbit");

        penerbit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penerbitActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 102));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Tahun Terbit");

        tahunTerbit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tahunTerbitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bukuLayout = new javax.swing.GroupLayout(buku);
        buku.setLayout(bukuLayout);
        bukuLayout.setHorizontalGroup(
            bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bukuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bukuLayout.createSequentialGroup()
                        .addGroup(bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel5))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bukuLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(penerbit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(namaPengarang, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(judulBuku, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(kodeBuku, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tahunTerbit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bukuLayout.setVerticalGroup(
            bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bukuLayout.createSequentialGroup()
                .addGroup(bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kodeBuku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(judulBuku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(namaPengarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(penerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bukuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tahunTerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        cariText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cariTextActionPerformed(evt);
            }
        });

        tambah.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        tambah.setForeground(new java.awt.Color(0, 51, 102));
        tambah.setText("Tambah");
        tambah.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahActionPerformed(evt);
            }
        });

        cari.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        cari.setForeground(new java.awt.Color(0, 51, 102));
        cari.setText("Cari");
        cari.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cariActionPerformed(evt);
            }
        });

        simpan.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        simpan.setForeground(new java.awt.Color(0, 51, 102));
        simpan.setText("Simpan");
        simpan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanActionPerformed(evt);
            }
        });

        batal.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        batal.setForeground(new java.awt.Color(0, 51, 102));
        batal.setText("Batal");
        batal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        perbarui.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        perbarui.setForeground(new java.awt.Color(0, 51, 102));
        perbarui.setText("Perbarui");
        perbarui.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        perbarui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perbaruiActionPerformed(evt);
            }
        });

        hapus.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        hapus.setForeground(new java.awt.Color(0, 51, 102));
        hapus.setText("Hapus");
        hapus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });

        keluar.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        keluar.setForeground(new java.awt.Color(0, 51, 102));
        keluar.setText("Keluar");
        keluar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        keluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keluarActionPerformed(evt);
            }
        });

        tampil.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        tampil.setForeground(new java.awt.Color(0, 51, 102));
        tampil.setText("Tampil");
        tampil.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tampil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tampilActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 51, 102));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Tanggal Pinjam    :");

        jLabel13.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 51, 102));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Denda                      :");

        dendaText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dendaTextActionPerformed(evt);
            }
        });

        tabelTransaksi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "NIM", "Kode Buku", "Tanggal Pinjam", "Tanggal Kembali", "Denda"
            }
        ));
        jScrollPane1.setViewportView(tabelTransaksi);

        cariTextBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cariTextBukuActionPerformed(evt);
            }
        });

        cariBuku.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        cariBuku.setForeground(new java.awt.Color(0, 51, 102));
        cariBuku.setText("Cari");
        cariBuku.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cariBuku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cariBukuActionPerformed(evt);
            }
        });

        tanggalPinjam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanggalPinjamActionPerformed(evt);
            }
        });

        tanggalKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanggalKembaliActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Bodoni MT", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 51, 102));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Tanggal Kembali  :");

        javax.swing.GroupLayout layoutTransaksiLayout = new javax.swing.GroupLayout(layoutTransaksi);
        layoutTransaksi.setLayout(layoutTransaksiLayout);
        layoutTransaksiLayout.setHorizontalGroup(
            layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layoutTransaksiLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layoutTransaksiLayout.createSequentialGroup()
                        .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(anggota, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layoutTransaksiLayout.createSequentialGroup()
                                .addComponent(cariText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cari, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layoutTransaksiLayout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dendaText, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)))
                        .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layoutTransaksiLayout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addComponent(cariTextBuku)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cariBuku, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layoutTransaksiLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layoutTransaksiLayout.createSequentialGroup()
                        .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layoutTransaksiLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(tambah)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(perbarui)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(simpan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(batal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hapus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tampil)
                                .addGap(184, 184, 184)
                                .addComponent(keluar))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layoutTransaksiLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tanggalPinjam, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tanggalKembali)
                                .addGap(3, 3, 3)))
                        .addGap(21, 21, 21))))
        );
        layoutTransaksiLayout.setVerticalGroup(
            layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layoutTransaksiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layoutTransaksiLayout.createSequentialGroup()
                        .addComponent(buku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cariTextBuku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cariBuku)))
                    .addGroup(layoutTransaksiLayout.createSequentialGroup()
                        .addComponent(anggota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cari)
                            .addComponent(cariText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dendaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tanggalPinjam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tanggalKembali, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(simpan)
                        .addComponent(batal)
                        .addComponent(hapus)
                        .addComponent(keluar)
                        .addComponent(tampil))
                    .addGroup(layoutTransaksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tambah)
                        .addComponent(perbarui)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1_perpustakaan/3.png"))); // NOI18N

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(layoutTransaksi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(layoutTransaksi, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NIMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NIMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NIMActionPerformed

    private void namaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaActionPerformed

    private void jurusanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jurusanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jurusanActionPerformed

    private void nomorHpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomorHpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomorHpActionPerformed

    private void kodeBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kodeBukuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kodeBukuActionPerformed

    private void judulBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_judulBukuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_judulBukuActionPerformed

    private void namaPengarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaPengarangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaPengarangActionPerformed

    private void penerbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penerbitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_penerbitActionPerformed

    private void tahunTerbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tahunTerbitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tahunTerbitActionPerformed

    private void cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cariActionPerformed
        try {
            // Mendapatkan koneksi dari kelas DatabaseConnection
            Connection koneksi = DatabaseConnection.getConnection();

            // Membuat PreparedStatement untuk menghindari SQL injection
            String query = "SELECT * FROM data_anggota WHERE nim=?";
            PreparedStatement preparedStatement = koneksi.prepareStatement(query);

            // Mengatur nilai untuk parameter
            preparedStatement.setString(1, cariText.getText());

            // Menjalankan query
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                // Menampilkan data yang ditemukan ke dalam JTextField
                NIM.setText(resultSet.getString("nim"));
                nama.setText(resultSet.getString("nama"));
                nomorHp.setText(resultSet.getString("no_hp"));
                jurusan.setText(resultSet.getString("jurusan"));

                // Menampilkan pesan sukses menggunakan JOptionPane
                JOptionPane.showMessageDialog(this, "Data ditemukan", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Menampilkan pesan jika data tidak ditemukan
                JOptionPane.showMessageDialog(this, "Data tidak ditemukan", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }

            // Menutup sumber daya
            preparedStatement.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DataAnggota.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_cariActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        // Mendapatkan indeks baris yang dipilih
    int selectedRow = tabelTransaksi.getSelectedRow();

    // Memastikan bahwa ada baris yang dipilih sebelum melanjutkan
    if (selectedRow != -1) {
        // Mengambil data dari baris yang dipilih
        String nimToDelete = tabelTransaksi.getValueAt(selectedRow, 0).toString();
        String kodeBukuToDelete = tabelTransaksi.getValueAt(selectedRow, 1).toString();

        // Menampilkan konfirmasi penghapusan
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                // Mendapatkan koneksi dari kelas DatabaseConnection
                Connection koneksi = DatabaseConnection.getConnection();

                // Membuat PreparedStatement untuk menghindari SQL injection
                String query = "DELETE FROM transaksi_buku WHERE nim=? AND kode_buku=?";
                PreparedStatement preparedStatement = koneksi.prepareStatement(query);

                // Mengatur nilai untuk parameter
                preparedStatement.setString(1, nimToDelete);
                preparedStatement.setString(2, kodeBukuToDelete);

                // Menjalankan query penghapusan
                int rowsDeleted = preparedStatement.executeUpdate();

                // Menampilkan pesan hasil penghapusan
                if (rowsDeleted > 0) {
                    JOptionPane.showMessageDialog(this, "Data berhasil dihapus", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                    loadDataToTable();

                    // Reset input fields setelah penghapusan
                    NIM.setText("");
                    nama.setText("");
                    nomorHp.setText("");
                    jurusan.setText("");
                    kodeBuku.setText("");
                    judulBuku.setText("");
                    namaPengarang.setText("");
                    penerbit.setText("");
                    tahunTerbit.setText("");
                    tanggalPinjam.setText("");
                    tanggalKembali.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal menghapus data", "Error", JOptionPane.ERROR_MESSAGE);
                }

                // Menutup sumber daya
                preparedStatement.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DataAnggota.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    } else {
        // Menampilkan pesan jika tidak ada baris yang dipilih
        JOptionPane.showMessageDialog(this, "Pilih data yang ingin dihapus", "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_hapusActionPerformed

    private void keluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keluarActionPerformed
        String Menu = "Menu"; 
        switchToFrame(Menu);
    }//GEN-LAST:event_keluarActionPerformed

    private void tampilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tampilActionPerformed
        loadDataToTable();
    }//GEN-LAST:event_tampilActionPerformed
    
    private static final int MAX_PINJAM_HARI = 5;
    private static final int DENDA_PER_HARI = 1000;
    
    private void simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanActionPerformed
       try {
        // Mendapatkan tanggal pinjam
        SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");
        SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");

        String tanggalPinjamStr = tanggalPinjam.getText();

        try {
            java.util.Date date = inputFormat.parse(tanggalPinjamStr);
            tanggalPinjamStr = outputFormat.format(date);
        } catch (ParseException ex) {
            ex.printStackTrace();
            // Tambahkan penanganan kesalahan jika format tanggal tidak valid
            JOptionPane.showMessageDialog(this, "Format tanggal tidak valid", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Hentikan eksekusi lebih lanjut jika format tanggal tidak valid
        }

        // Mendapatkan tanggal kembali dari JFormattedTextField
        String tanggalKembaliStr = tanggalKembali.getText();
        if (!tanggalKembaliStr.isEmpty()) {
            try {
                java.util.Date date = inputFormat.parse(tanggalKembaliStr);
                tanggalKembaliStr = outputFormat.format(date);
            } catch (ParseException ex) {
                ex.printStackTrace();
                // Tambahkan penanganan kesalahan jika format tanggal tidak valid
                JOptionPane.showMessageDialog(this, "Format tanggal kembali tidak valid", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Hentikan eksekusi lebih lanjut jika format tanggal tidak valid
            }
        }

        // Menyimpan data ke dalam database
        Connection koneksi = DatabaseConnection.getConnection();
        String nim = NIM.getText();
        String kodeBukuStr = kodeBuku.getText();

        // Query untuk menyimpan data transaksi
        String updateQuery = "UPDATE transaksi_buku SET tanggal_pinjam=?, tanggal_kembali=?, denda=? WHERE nim=? AND kode_buku=?";
        PreparedStatement preparedStatement = koneksi.prepareStatement(updateQuery);

        // Mengatur nilai untuk parameter
        preparedStatement.setString(1, tanggalPinjamStr);

        // Mengatur tanggal_kembali berdasarkan nilai null atau tidak
        if (!tanggalKembaliStr.isEmpty()) {
            preparedStatement.setString(2, tanggalKembaliStr);
        } else {
            preparedStatement.setNull(2, java.sql.Types.DATE);
        }

        // Menghitung denda jika melebihi batas peminjaman
        int denda = hitungDenda(tanggalPinjamStr, tanggalKembaliStr);
        preparedStatement.setInt(3, denda);

        preparedStatement.setString(4, nim);
        preparedStatement.setString(5, kodeBukuStr);

        // Menjalankan query
        int hasil = preparedStatement.executeUpdate();

        // Menampilkan pesan sukses atau gagal
        if (hasil > 0) {
            // Menampilkan pesan sukses menggunakan JOptionPane
            JOptionPane.showMessageDialog(this, "Data disimpan. Denda yang dihitung: Rp " + denda, "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Menampilkan pesan jika data tidak berhasil disimpan
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data", "Gagal", JOptionPane.ERROR_MESSAGE);
        }

        // Reset input fields setelah penyimpanan
        resetInputFields();

        // Menutup sumber daya
        preparedStatement.close();
    } catch (SQLException | ClassNotFoundException ex) {
        ex.printStackTrace();
    }
}

private int hitungDenda(String tanggalPinjamStr, String tanggalKembaliStr) {
    if (tanggalKembaliStr == null || tanggalKembaliStr.isEmpty()) {
        return 0; // Tidak ada denda jika buku belum dikembalikan
    }

    // Mendapatkan tanggal pinjam dan tanggal kembali sebagai objek Date
    try {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date tanggalPinjam = dateFormat.parse(tanggalPinjamStr);
        Date tanggalKembali = dateFormat.parse(tanggalKembaliStr);

        // Menghitung selisih hari antara tanggal kembali dan tanggal pinjam
        long selisihHari = daysBetween(tanggalPinjam, tanggalKembali);

        // Jika melebihi batas peminjaman, hitung denda
        if (selisihHari > MAX_PINJAM_HARI) {
            int hariTerlambat = (int) (selisihHari - MAX_PINJAM_HARI);
            return hariTerlambat * DENDA_PER_HARI;
        }
    } catch (ParseException ex) {
        ex.printStackTrace();
    }

    return 0;
    }//GEN-LAST:event_simpanActionPerformed

    private void cariTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cariTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cariTextActionPerformed

    private void cariTextBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cariTextBukuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cariTextBukuActionPerformed

    private void cariBukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cariBukuActionPerformed
        try {
            // Mendapatkan koneksi dari kelas DatabaseConnection
            Connection koneksi = DatabaseConnection.getConnection();

            // Membuat PreparedStatement untuk menghindari SQL injection
            String query = "SELECT * FROM data_buku WHERE kode_buku=? OR judul_buku=?";
            PreparedStatement preparedStatement = koneksi.prepareStatement(query);

            // Mengatur nilai untuk parameter
            preparedStatement.setString(1, cariTextBuku.getText());
            preparedStatement.setString(2, cariTextBuku.getText());
            
            // Menjalankan query
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                // Menampilkan data yang ditemukan ke dalam JTextField
                kodeBuku.setText(resultSet.getString("kode_buku"));
                judulBuku.setText(resultSet.getString("judul_buku"));
                namaPengarang.setText(resultSet.getString("nama_pengarang"));
                penerbit.setText(resultSet.getString("penerbit"));
                tahunTerbit.setText(resultSet.getString("tahun_terbit"));

                // Menampilkan pesan sukses menggunakan JOptionPane
                JOptionPane.showMessageDialog(this, "Data ditemukan", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Menampilkan pesan jika data tidak ditemukan
                JOptionPane.showMessageDialog(this, "Data tidak ditemukan", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }

            // Menutup sumber daya
            preparedStatement.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DataAnggota.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cariBukuActionPerformed

    private void tanggalKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanggalKembaliActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tanggalKembaliActionPerformed

    private void tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahActionPerformed
        try {
        // Mendapatkan tanggal pinjam
        SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");
        SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");

        String tanggalPinjamStr = tanggalPinjam.getText();

        try {
            java.util.Date date = inputFormat.parse(tanggalPinjamStr);
            tanggalPinjamStr = outputFormat.format(date);
        } catch (ParseException ex) {
            ex.printStackTrace();
            // Tambahkan penanganan kesalahan jika format tanggal tidak valid
            JOptionPane.showMessageDialog(this, "Format tanggal tidak valid", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Hentikan eksekusi lebih lanjut jika format tanggal tidak valid
        }

        // Menghitung tanggal kembali berdasarkan maksimal peminjaman
        Calendar calPinjam = Calendar.getInstance();
        try {
            calPinjam.setTime(outputFormat.parse(tanggalPinjamStr)); // Menggunakan tanggalPinjam yang sudah di-parse
        } catch (ParseException ex) {
            Logger.getLogger(TransaksiBuku.class.getName()).log(Level.SEVERE, null, ex);
        }
        Calendar calKembali = (Calendar) calPinjam.clone();
        calKembali.add(Calendar.DATE, MAX_PINJAM_HARI);
        String tanggalKembaliStr = outputFormat.format(calKembali.getTime());

        // Menyimpan data ke dalam database
        Connection koneksi = DatabaseConnection.getConnection();
        String nim = NIM.getText();
        String kodeBukuStr = kodeBuku.getText();

        // Check apakah buku sudah dipinjam
        if (bukuSudahDipinjam(kodeBukuStr)) {
            JOptionPane.showMessageDialog(this, "Buku sedang dipinjam, tidak dapat meminjam kembali", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Query untuk menyimpan data transaksi
        String insertQuery = "INSERT INTO transaksi_buku (nim, kode_buku, tanggal_pinjam, tanggal_kembali, denda) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement preparedStatement = koneksi.prepareStatement(insertQuery);

        // Mengatur nilai untuk parameter
        preparedStatement.setString(1, nim);
        preparedStatement.setString(2, kodeBukuStr);
        preparedStatement.setString(3, tanggalPinjamStr);

        // Menyimpan tanggal_kembali sebagai null
        preparedStatement.setNull(4, java.sql.Types.DATE);

        // Menyimpan denda sebagai 0
        preparedStatement.setInt(5, 0);

        // Menjalankan query
        int hasil = preparedStatement.executeUpdate();

        // Menampilkan pesan sukses atau gagal
        if (hasil > 0) {
            // Menampilkan pesan sukses menggunakan JOptionPane
            JOptionPane.showMessageDialog(this, "Data disimpan", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Menampilkan pesan jika data tidak berhasil disimpan
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data", "Gagal", JOptionPane.ERROR_MESSAGE);
        }

        NIM.setText("");
        nama.setText("");
        nomorHp.setText("");
        jurusan.setText("");
        kodeBuku.setText("");
        judulBuku.setText("");
        namaPengarang.setText("");
        penerbit.setText("");
        tahunTerbit.setText("");
        dendaText.setText("");
        cariText.setText("");
        cariTextBuku.setText("");

        // Menutup sumber daya
        preparedStatement.close();
    } catch (SQLException | ClassNotFoundException ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_tambahActionPerformed

    private void perbaruiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perbaruiActionPerformed
        int selectedRow = tabelTransaksi.getSelectedRow();

        // Memastikan bahwa ada baris yang dipilih sebelum memperbarui
        if (selectedRow != -1) {
            try {
               // Mendapatkan data dari baris yang dipilih
                Object nimObject = tabelTransaksi.getValueAt(selectedRow, 0);
                Object kodeBukuObject = tabelTransaksi.getValueAt(selectedRow, 1);
                Object tanggalPinjamObject = tabelTransaksi.getValueAt(selectedRow, 2);
                Object tanggalKembaliObject = tabelTransaksi.getValueAt(selectedRow, 3);
                Object dendaObject = tabelTransaksi.getValueAt(selectedRow, 4);

                // Check for null values before invoking toString()
                String nimToUpdate = nimObject != null ? nimObject.toString() : "";
                String kodeBukuToUpdate = kodeBukuObject != null ? kodeBukuObject.toString() : "";
                String tanggalPinjamToUpdate = tanggalPinjamObject != null ? tanggalPinjamObject.toString() : "";
                String tanggalKembaliToUpdate = tanggalKembaliObject != null ? tanggalKembaliObject.toString() : "";
                String dendaToUpdate = dendaObject != null ? dendaObject.toString() : "";

                // Menampilkan data pada JTextField
                cariText.setText(nimToUpdate);
                cariTextBuku.setText(kodeBukuToUpdate);

                // Handle null values for tanggalPinjam, tanggalKembali, and denda
                tanggalPinjam.setText(tanggalPinjamToUpdate);
                tanggalKembali.setText(tanggalKembaliToUpdate);
                dendaText.setText(dendaToUpdate);

                // Menyimpan NIM yang akan diperbarui
                // Anda bisa menyimpannya sebagai variabel instance jika diperlukan
                // Contoh: this.nimToUpdate = nimToUpdate;

                // Tambahkan logika lain yang diperlukan untuk proses perbarui
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            } else {
                // Menampilkan pesan jika tidak ada baris yang dipilih
                JOptionPane.showMessageDialog(this, "Pilih data yang ingin diperbarui", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
    }//GEN-LAST:event_perbaruiActionPerformed

    private void dendaTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dendaTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dendaTextActionPerformed

    private void tanggalPinjamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanggalPinjamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tanggalPinjamActionPerformed
    
    private void switchToFrame(String frameName) {
        try {
            this.dispose(); 
            if (frameName.equals("Menu")) { 
                Menu menu = new Menu();
                menu.setVisible(true);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void loadDataToTable() {
       try {
        Connection koneksi = DatabaseConnection.getConnection();
        String query = "SELECT * FROM transaksi_buku";
        PreparedStatement preparedStatement = koneksi.prepareStatement(query);
        ResultSet resultSet = preparedStatement.executeQuery();

        // Mendapatkan model tabel yang sudah ada atau membuat model baru
        DefaultTableModel tableModel = (DefaultTableModel) tabelTransaksi.getModel();

        // Menghapus semua baris yang sudah ada pada model tabel
        tableModel.setRowCount(0);

        while (resultSet.next()) {
            // Membuat vektor untuk menyimpan data baris
            Vector<Object> row = new Vector<>();
            row.add(resultSet.getString("nim"));
            row.add(resultSet.getString("kode_buku"));

            // Format tanggal_pinjam dan tanggal_kembali
            SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat outputFormat = new SimpleDateFormat("dd-MM-yyyy");

            // Check if the date fields are null before formatting
            Date tanggalPinjam = resultSet.getDate("tanggal_pinjam");
            Date tanggalKembali = resultSet.getDate("tanggal_kembali");

            row.add(tanggalPinjam != null ? outputFormat.format(tanggalPinjam) : null);  // Format tanggal_pinjam
            row.add(tanggalKembali != null ? outputFormat.format(tanggalKembali) : null); // Format tanggal_kembali

            row.add(resultSet.getInt("denda"));

            // Menambahkan vektor ke dalam model tabel
            tableModel.addRow(row);
        }

        // Menutup sumber daya
        resultSet.close();
        preparedStatement.close();
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
        }
    }
    
    private int hitungDenda(Calendar calPinjam, Calendar calKembali) {
        // Mendapatkan tanggal sekarang
        Calendar calSekarang = Calendar.getInstance();

        // Menghitung selisih hari antara tanggal kembali dan tanggal sekarang
        long selisihHari = daysBetween(calKembali.getTime(), calSekarang.getTime());

        // Jika melebihi batas peminjaman, hitung denda
        if (selisihHari > MAX_PINJAM_HARI) {
            int hariTerlambat = (int) (selisihHari - MAX_PINJAM_HARI);
            return hariTerlambat * DENDA_PER_HARI;
        } else {
            return 0; // Tidak ada denda jika belum melebihi batas peminjaman
        }
    }
    
    private long daysBetween(Date startDate, Date endDate) {
    long differenceMillis = endDate.getTime() - startDate.getTime();
    return differenceMillis / (24 * 60 * 60 * 1000);
    }
    
    private void resetInputFields() {
        // Reset semua input fields setelah penyimpanan
        NIM.setText("");
        nama.setText("");
        nomorHp.setText("");
        jurusan.setText("");
        kodeBuku.setText("");
        judulBuku.setText("");
        namaPengarang.setText("");
        penerbit.setText("");
        tahunTerbit.setText("");
        tanggalPinjam.setText("");
        tanggalKembali.setText("");
        dendaText.setText("");
        cariTextBuku.setText("");
        cariText.setText("");
    }
    
    private boolean bukuSudahDipinjam(String kodeBuku) throws SQLException, ClassNotFoundException {
        Connection koneksi = DatabaseConnection.getConnection();
        String query = "SELECT COUNT(*) FROM transaksi_buku WHERE kode_buku=? AND tanggal_kembali IS NULL";
        try (PreparedStatement preparedStatement = koneksi.prepareStatement(query)) {
            preparedStatement.setString(1, kodeBuku);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    int jumlahPinjam = resultSet.getInt(1);
                    return jumlahPinjam > 0;
                }
            }
        }
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransaksiBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransaksiBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransaksiBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransaksiBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransaksiBuku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NIM;
    private javax.swing.JPanel anggota;
    private javax.swing.JButton batal;
    private javax.swing.JPanel buku;
    private javax.swing.JButton cari;
    private javax.swing.JButton cariBuku;
    private javax.swing.JTextField cariText;
    private javax.swing.JTextField cariTextBuku;
    private javax.swing.JTextField dendaText;
    private javax.swing.JButton hapus;
    private javax.swing.JPanel header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField judulBuku;
    private javax.swing.JTextField jurusan;
    private javax.swing.JButton keluar;
    private javax.swing.JTextField kodeBuku;
    private javax.swing.JPanel layoutTransaksi;
    private javax.swing.JTextField nama;
    private javax.swing.JTextField namaPengarang;
    private javax.swing.JTextField nomorHp;
    private javax.swing.JTextField penerbit;
    private javax.swing.JButton perbarui;
    private javax.swing.JButton simpan;
    private javax.swing.JTable tabelTransaksi;
    private javax.swing.JTextField tahunTerbit;
    private javax.swing.JButton tambah;
    private javax.swing.JButton tampil;
    private javax.swing.JFormattedTextField tanggalKembali;
    private javax.swing.JFormattedTextField tanggalPinjam;
    // End of variables declaration//GEN-END:variables
}
